services:
  db:
    image: postgres:17-alpine
    env_file:
      - .env-staging
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 30s
    networks:
      - backend
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redisdata_local:/data
    networks:
      - backend
    restart: unless-stopped

  web:
    build: .
    env_file:
      - .env-staging
    volumes:
      - static_volume:/app/staticfiles
    expose:
      - 8000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - backend
    # security_opt:
    #   - no-new-privileges:true
    ports:
      - "8081:8000"      # Map container port 8000 to host 8081 for local
    restart: unless-stopped

  nginx:
    image: nginx:1.25-alpine
    volumes:
      - static_volume:/static:ro
      - media_volume:/media:ro
      - ./nginx.local.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - backend
    restart: unless-stopped
    ports:
      - "8082:80"        # local nginx on host port 8082 to avoid conflict with prod
      - "8443:443"


networks:
  backend:
    driver: bridge

volumes:
  pgdata_local:
  redisdata_local:
  static_volume:
  media_volume: